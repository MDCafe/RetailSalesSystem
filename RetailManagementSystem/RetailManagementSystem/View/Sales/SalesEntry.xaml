<UserControl x:Class="RetailManagementSystem.View.Sales.SalesEntry"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:BHCustCtrl="clr-namespace:BHCustCtrl;assembly=BHCustCtrl"
             xmlns:UC="clr-namespace:RetailManagementSystem.UserControls"
             xmlns:Validator="clr-namespace:RetailManagementSystem.Validation"
             xmlns:behaviours="clr-namespace:RetailManagementSystem.View.Behaviours"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="800"
             FocusManager.FocusedElement="{Binding ElementName=CboCustomers}"
             x:Name="UCSales"
             >
    <UserControl.Resources>
        
        <ControlTemplate x:Key="ValidationTemplate">
            <DockPanel>
                <TextBlock Foreground="Red" FontSize="20">!</TextBlock>
                <AdornedElementPlaceholder/>
            </DockPanel>
        </ControlTemplate>
        
    </UserControl.Resources>
    <xctk:BusyIndicator IsBusy="{Binding DataContext.PanelLoading, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="113" />
                <ColumnDefinition Width="106"/>
                <ColumnDefinition Width="100"/>
                <ColumnDefinition Width="213"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="34"/>
                <RowDefinition Height="40"/>
                <RowDefinition Height="40"/>
                <RowDefinition Height="100*"/>
                <RowDefinition Height="40"/>
                <RowDefinition Height="30"/>
                <RowDefinition Height="30"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Label Content="Date :" Grid.Row="0" Grid.Column="0" Margin="0,5,0,0"/>
            <TextBlock Text="{Binding TranscationDate, StringFormat='dd/MM/yyyy'}" Grid.Row="0" Grid.Column="1" Margin="5"/>
            <!--<DatePicker Name="SalesDate" ForceCursor="True" FirstDayOfWeek="Monday" IsEnabled="False"
                        SelectedDateFormat="Short" SelectedDate="{Binding TranscationDate}" BorderThickness="0" Grid.Column="1" Margin="0,5,0,0" Height="25"/>-->
            <Label Content="Customer Name :" Grid.Row="0" Grid.Column="2" Margin="0,5,0,0"/>
            <ComboBox x:Name="CboCustomers" DisplayMemberPath="Name"  HorizontalContentAlignment="Stretch" SelectedValuePath=""
                      ItemsSource="{Binding CustomersList}"  IsEditable="True"                                  
                        Validation.ErrorTemplate="{StaticResource ValidationTemplate}" Grid.Row="0" Grid.Column="3" Margin="0,5,0,0" Height="25"
                        IsEnabled="{Binding NegateIsEditMode}"
                  >
                <!--<i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding CustomerChangedCommand}" CommandParameter=""/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>--><!--
                <ComboBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ComboBoxItem}">
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <Grid Height="30" Width="Auto">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="200"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Label Margin="1" Grid.Row="0" Grid.Column="0" Content="{Binding Name}" HorizontalAlignment="Left"/>
                                        --><!--<Label Margin="1" Grid.Row="0" Grid.Column="1" Content="|" HorizontalAlignment="Left"/>--><!--
                                        <Label Margin="1" Grid.Row="0" Grid.Column="2" Content="{Binding BalanceDue}" HorizontalAlignment="Right"/>
                                    </Grid>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ComboBox.ItemContainerStyle>-->
                <ComboBox.SelectedItem>
                    <Binding Path="SelectedCustomer" NotifyOnValidationError="True" UpdateSourceTrigger="LostFocus">
                        <Binding.ValidationRules>
                            <Validator:ValidateComboRule/>
                        </Binding.ValidationRules>
                    </Binding>
                </ComboBox.SelectedItem>
                <ComboBox.Text>
                    <Binding Path="SelectedCustomerText"/>
                </ComboBox.Text>
            </ComboBox>
            <StackPanel Grid.Row="0" Grid.Column="4" Orientation="Horizontal">
                <Label Content="Bill No" Width="45" Margin="15,5,0,0"></Label>
                <Label x:Name="txtBillNo" Width="60" Margin="5" Content="{Binding RunningBillNo}"/>
                <!--<Button x:Name="btnAddCustomer" Content="Customer Quick Add" 
                    Width="130" Command="{Binding AddCustomerCommand}" Margin="5" />-->
            </StackPanel>

            <Label Content="Mode Of Payment :" Grid.Row="1" Grid.Column="0" Margin="0,5,0,0" ></Label>
            <ComboBox Name="CboPaymentMode" ItemsSource="{Binding PaymentModes}" SelectedValuePath="PaymentId"
                      DisplayMemberPath="PaymentName" SelectedItem="SelectedPaymentMode" SelectedValue="{Binding SelectedPaymentId}" 
                      Height="25" Grid.Row="1" Grid.Column="1" Margin="0,5,10,5" />

            <Label Content="Order No:"  Margin="0,5,0,0" Grid.Row="1" Grid.Column="2"></Label>
            <TextBox Name="txtOrderNo" Text="{Binding OrderNo}" Margin="0,5,0,0" Grid.Row="1" Grid.Column="3" Height="20" />

            <Label Content="Item Barcode:"  Margin="0,5,0,0" Grid.Row="2" Grid.Column="0"/>
            <TextBox Name="txtBarcodeNO" Text="{Binding ProductBarcode}" KeyUp="TxtBarcodeNOKeyUp" Margin="0,5,0,0" Grid.Row="2" Grid.Column="1" Height="25" Grid.ColumnSpan="2">
                <!--<TextBox.InputBindings>
                    <KeyBinding Key="Enter" Command="{Binding EnterKeyCommand}"/>
                    --><!--<KeyBinding Key="Tab" Command="{Binding EnterKeyCommand}"/>--><!--
                </TextBox.InputBindings>-->
            </TextBox>
                        
            <!--DataGrid-->
            <DataGrid Name="SalesDataGrid" IsSynchronizedWithCurrentItem="True" 
                                      ItemsSource="{Binding Path=SaleDetailList}"
                                      AutoGenerateColumns="False" RowHeight="25" 
                                      Grid.Row="3"
                                      SelectionMode="Single" Grid.ColumnSpan="5"
                                      RowHeaderWidth="25"
                                      SelectionUnit="FullRow"
                                      CanUserSortColumns="False" CanUserReorderColumns="False" VirtualizingPanel.IsVirtualizing="True">
               
                <DataGrid.Resources>
                    <Style TargetType="DataGridRow">
                        <Setter Property="Background" Value="LightYellow"/>
                    </Style>
                    <Style TargetType="DataGridCell">
                        <!--<EventSetter Event="PreviewKeyDown" Handler="Cell_PreviewKeyDown"/>
                        <EventSetter Event="GotFocus" Handler="Cell_GotFocus"/>-->
                        <!--<Setter />-->
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" Value="#6F0090FF"/>
                            </Trigger>
                        </Style.Triggers>
                        <Style.Setters>
                            <!--<EventSetter Event="PreviewKeyDown" Handler="Cell_PreviewKeyDown"/>-->
                            <!--<EventSetter Event="GotFocus" Handler="Cell_GotFocus"/>-->
                            <!--<Setter Property="IsEnabled" Value="{Binding PropertyReadOnly}" />-->
                        </Style.Setters>
                   
                    </Style>

                    <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
                        <Setter Property="Padding" Value="-2"/>
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="Background" Value="Red"/>
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightBlue" />
                    <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
                    <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
                    
                </DataGrid.Resources>
                <DataGrid.RowHeaderTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Item.SerialNo, 
                                                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}}"/>
                        
                    </DataTemplate>
                </DataGrid.RowHeaderTemplate>

                <DataGrid.Columns>
                    <BHCustCtrl:CustDataGridComboBoxColumn  x:Name="custComboBoxCol" Width="250" Header="Products"
                                                                    ItemsSource="{Binding ProductsPriceList}"                                                                  
                                                                    SelectedValuePath="ProductId"
                                                                    DisplayMemberPath="ProductName"  
                                                                    CustComboBoxSelectedPath ="ProductId"
                                                                    CustComboBoxSelectedValue ="ProductId"
                                                                    SelectedValueBinding="{Binding ProductId}" 
                                                                    ComboBoxSelectedEvent="CustComboBoxColComboBoxSelectedEvent"                                                        
                                  >
                        <DataGridTextColumn Header="Product Name" Binding="{Binding ProductName}" />
                        <DataGridTextColumn Header="Quantity" Binding="{Binding Quantity}" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                        <DataGridTextColumn Header="Selling Price" Binding="{Binding SellingPrice}" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                        <DataGridTextColumn Header="Price" Binding="{Binding Price}" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                        <DataGridTextColumn Header="Unit Per Case" Binding="{Binding UnitPerCase}" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                        <DataGridTextColumn Header="Expiry Date" Binding="{Binding ExpiryDate}" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                    </BHCustCtrl:CustDataGridComboBoxColumn>


                    <DataGridTextColumn Width="150"  Header="Quantity" EditingElementStyle="{StaticResource errorStyle}" ElementStyle="{StaticResource DataGridCellRightAlign}">
                        <DataGridTextColumn.Binding>
                            <Binding Path="Qty" >
                                <!--<Binding.ValidationRules UpdateSourceTrigger="PropertyChanged">
                                    <Validator:QuantityValidationRule ValidationStep="UpdatedValue"/>
                                </Binding.ValidationRules>-->
                            </Binding>
                        </DataGridTextColumn.Binding>
                    </DataGridTextColumn>
                    <!--<DataGridTextColumn Header="Qty" Binding="{Binding Qty}" ElementStyle="{StaticResource DataGridCellRightAlign}"/>-->
                    <DataGridTextColumn Header="Selling Price" Binding="{Binding SellingPrice}" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                    <DataGridTextColumn Header="Case" Binding="{Binding CaseQuantity}" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                    <DataGridTextColumn Header="Discount (%)" Binding="{Binding DiscountPercentage}" ElementStyle="{StaticResource DataGridCellRightAlign}" />
                    <DataGridTextColumn Header="Discount Amount" Binding="{Binding DiscountAmount}" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                    <DataGridTextColumn Width="150" Header="Amount" Binding="{Binding Amount, StringFormat=N2}" IsReadOnly="True" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                    <DataGridTextColumn Width="150" Header="Stock Available" Binding="{Binding AvailableStock}" IsReadOnly="True" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                    <DataGridTextColumn Header="Price" Binding="{Binding CostPrice}" IsReadOnly="True" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                    <DataGridTextColumn Header="Last Sold Price" Binding="{Binding LastSoldPrice}" IsReadOnly="True" ElementStyle="{StaticResource DataGridCellRightAlign}"/>
                </DataGrid.Columns>
                <DataGrid.ColumnHeaderStyle>
                    <Style TargetType="{x:Type DataGridColumnHeader}">
                        <Setter Property="FontWeight"  Value="Bold" />
                        <Setter Property="HorizontalContentAlignment" Value="Center" />
                    </Style>
                </DataGrid.ColumnHeaderStyle>

                <!--<toolKit:DataGrid.RowValidationRules>
                <Validator:QuantityValidationRule ValidationStep="UpdatedValue"/>
            </toolKit:DataGrid.RowValidationRules>

            <toolKit:DataGrid.RowValidationErrorTemplate>
                <ControlTemplate>
                    <Grid Margin="0,-2,0,-2"  ToolTip="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}},
                                                        Path=(Validation.Errors)[0].ErrorContent}">
                        <Ellipse StrokeThickness="0" Fill="Red" Width="{TemplateBinding FontSize}"  Height="{TemplateBinding FontSize}" />
                        <TextBlock Text="!" FontSize="{TemplateBinding FontSize}" FontWeight="Bold" Foreground="White" HorizontalAlignment="Center"  />
                    </Grid>
                </ControlTemplate>
            </toolKit:DataGrid.RowValidationErrorTemplate>-->
            </DataGrid>
            <!--DataGrid-->
            <StackPanel Orientation="Horizontal" Grid.Row="4"  HorizontalAlignment="Right" Height="40" Grid.ColumnSpan="5" >
                <Label Content="Discount Amt"  Margin="5,5,5,5"/>
                <TextBox Name="txtDiscount" Width="40" Margin="5,5,10,5" Height="20" Text="{Binding TotalDiscountAmount, TargetNullValue={x:Static sys:String.Empty}}"/>
                <Label Content="Discount %" Width="70" Margin="5"/>
                <TextBox Name="txtDiscountPercent" Width="30" Margin="5" Height="20" Text="{Binding TotalDiscountPercent, TargetNullValue={x:Static sys:String.Empty}}"/>
                <UC:SalesExtension  Margin="5" x:Name="SalesExtn"  Width="120" Height="25"/>

                <Label Content="Total" Margin="5" FontWeight="ExtraBold"/>
                <TextBlock x:Name="txtTotalAmount"  Width="100" Margin="5,5,5,5" Text="{Binding TotalAmount, TargetNullValue={x:Static sys:String.Empty} ,
                                StringFormat=N2}" FontWeight="ExtraBold" VerticalAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Grid.Row="5"  HorizontalAlignment="Right" Height="35" Grid.ColumnSpan="5">
                <Label Content="Amount Paid" Margin="5" FontWeight="ExtraBold"/>
                <TextBox x:Name="txtAmtPaid"  Width="100" Margin="5" Height="20" 
                     Text="{Binding AmountPaid, UpdateSourceTrigger=PropertyChanged}" FontWeight="ExtraBold">
                    <i:Interaction.Behaviors>
                        <behaviours:ClearOnFocusedBehavior/>
                    </i:Interaction.Behaviors>
                </TextBox>
            </StackPanel>
            <StackPanel Orientation="Horizontal" Grid.Row="6"  HorizontalAlignment="Right" Height="35" Grid.ColumnSpan="5" >
                <Label Content="Balance" Margin="5" FontWeight="ExtraBold"/>
                <TextBlock x:Name="txtBalance"  Width="100" Margin="5,5,5,5" Text="{Binding BalanceAmount, StringFormat=N2}" FontWeight="ExtraBold" VerticalAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Grid.Row="7"  HorizontalAlignment="Right" Height="40" Grid.ColumnSpan="5">
                <Button x:Name="btnSavePrint" Content="Save &amp; Print"  Width="100" Command="{Binding SaveCommand}" CommandParameter="0" Margin="5"/>
                <Button x:Name="btnSave" Content="Save"  Width="80" Command="{Binding SaveCommand}" Margin="5" CommandParameter="1"/>
                <Button x:Name="btnCancel" Content="Cancel Bill "  Width="80" Command="{Binding CancelBillCommand}" Margin="5" Visibility="{Binding IsVisible}"/>
                <Button x:Name="btClear" Content="Clear"  Width="80" Command="{Binding ClearCommand}"  Margin="5" IsEnabled="{Binding NegateIsEditMode}"/>
                <Button x:Name="btCancel" Content="Cancel"  Width="80" Command="{Binding CloseCommand}"  Margin="5"/>
            </StackPanel>

        </Grid>
    </xctk:BusyIndicator>
</UserControl>
